#pragma once

#include <cmath>

#include "ismpc_cpp/representations/footstep_plan.h"
#include "ismpc_cpp/representations/frame_info.h"
#include "ismpc_cpp/representations/state.h"
#include "ismpc_cpp/tools/proxsuite.h"
#include "ismpc_cpp/types/configs.h"
#include "ismpc_cpp/types/ismpc_qp.h"
#include "ismpc_cpp/types/math_types.h"
#include "ismpc_cpp/types/optimization.h"

namespace ismpc {

/**
 * @brief Model Predictive Control class
 *
 * This class implements a Model Predictive Control (MPC) algorithm to generate
 * a control trajectory of the robot's CoM. The CoM trajectory is generated by
 * solving an optimization problem that minimizes a cost function subject to
 * constraints on the robot's dynamics and the environment.In input, the MPC
 * module needs the current state of the robot and the desired footsteps.
 */
class ModelPredictiveController {
   private:
    const FrameInfo& frame_info;
    const State& state;
    const FootstepPlan& plan;

    // Parameters
    int numC;  // number of control points
    int numP;  // number of planning points
    Scalar delta;
    Scalar eta;
    int nl;
    Scalar h;

    // QP Struct
    IsmpcQp qpx;
    IsmpcQp qpy;
    VectorX x_sol;
    VectorX y_sol;

    // Var buffer
    Scalar xc, yc, xdc, ydc, xz, yz, xdz, ydz;

    // time related stuff
    std::chrono::high_resolution_clock::time_point start, end;

   public:
    ModelPredictiveController(const FrameInfo& frame_info, const State& state, const FootstepPlan& plan,
                              const Params& params)
        : frame_info(frame_info),
          state(state),
          plan(plan),
          numC(params.mpc.C),
          numP(params.mpc.P),
          delta(params.mpc.delta),
          eta(params.lip.eta),
          nl(params.mpc.nl),
          h(params.lip.h),
          qpx(IsmpcQp(params)),
          qpy(IsmpcQp(params)) {}

    /**
     * @brief Update the MPC module
     * Inside this function, the MPC module solves the optimization problem,
     * generates and saves the control trajectory. The control trajectory is
     * made of the zmp velocities. Practically, this function modifies the field
     * state.desired_state of the robot.
     */
    void update(State& state);

    Scalar total_mpc_qp_duration = 0.0;
    Scalar total_mpc_preprocessing_duration = 0.0;
    Scalar total_mpc_postprocessing_duration = 0.0;
};

}  // namespace ismpc
