#pragma once

#include <cmath>

#include "ismpc_cpp/representations/footstep_plan.h"
#include "ismpc_cpp/representations/frame_info.h"
#include "ismpc_cpp/representations/state.h"
#include "ismpc_cpp/tools/config/config.h"
#include "ismpc_cpp/tools/proxsuite.h"
#include "ismpc_cpp/types/math_types.h"
#include "ismpc_cpp/types/optimization.h"

namespace ismpc {
/**
 * @brief Model Predictive Control class
 *
 * This class implements a Model Predictive Control (MPC) algorithm to generate
 * a control trajectory of the robot's CoM. The CoM trajectory is generated by
 * solving an optimization problem that minimizes a cost function subject to
 * constraints on the robot's dynamics and the environment.In input, the MPC
 * module needs the current state of the robot and the desired footsteps.
 */
class ModelPredictiveController {
   private:
    Matrix Xdz, Ydz, Xf, Yf;

    const FrameInfo& frame_info;
    const State& state;
    const FootstepPlan& plan;

    // Optimization related stuff
    const int numC = Config::C;                    // number of control points
    isize n_eq = 2;                                // number of equality constraints
    isize dimz = 2 * numC;                         // number of zmp variables (xdz, ydz)
    InequalityConstraint zmp_constraint;           // zmp constraint
    InequalityConstraint zmp_velocity_constraint;  // zmp velocity constraint
    InequalityConstraint kinematic_constraint;     // kinematic constraint
    Matrix C;                                      // combined inequality constraint matrix
    VectorX l, u;                                  // combined inequality constraint bounds

    // Parameters
    const Scalar dxz = RobotConfig::dxz;
    const Scalar dyz = RobotConfig::dyz;
    const Scalar zmp_vx_max = RobotConfig::zmp_vx_max;
    const Scalar zmp_vy_max = RobotConfig::zmp_vy_max;
    const TailType tail_type = Config::tail_type;

    /**
     * @brief Get the Mpc Cost object such as to minimize the squared sum of zmp velocities
     * and the squared errore between proposed footsteps by the planner and dfootsteps
     * treated as decision variables
     *
     * @return Cost
     */
    Cost getCost() const;

    /**
     * @brief Get the Zmp Constraint object such as to keep the zmp always inside the convex hull.
     * In single support phase this corresponds to the support foot itself, while in double support
     * it is a moving rectangle (same size of the feet approximately) from the previous
     * support foot to the current one
     *
     * @return InequalityConstraint
     */
    InequalityConstraint getZmpConstraint(const Vector3& lipx, const Vector3& lipy) const;

    /**
     * @brief Get the Zmp Velocity Constraint object to keep the zmp velocity within a certain limit
     *
     * @return InequalityConstraint
     */
    InequalityConstraint getZmpVelocityConstraint() const;

    /**
     * @brief Get the Stability Constraint object (TODO doc)
     *
     * @return EqualityConstraint
     */
    EqualityConstraint getStabilityConstraint(const Vector3& lipx, const Vector3& lipy) const;

    // time related stuff
    std::chrono::high_resolution_clock::time_point start, end;

   public:
    ModelPredictiveController(const FrameInfo& frame_info, const State& state, const FootstepPlan& plan);

    /**
     * @brief Update the MPC module
     * Inside this function, the MPC module solves the optimization problem,
     * generates and saves the control trajectory. The control trajectory is
     * made of the zmp velocities. Practically, this function modifies the field
     * state.desired_state of the robot.
     */
    void update(State& state);

    Scalar total_mpc_qp_duration = 0.0;
    Scalar total_mpc_preprocessing_duration = 0.0;
    Scalar total_mpc_postprocessing_duration = 0.0;
};

}  // namespace ismpc
