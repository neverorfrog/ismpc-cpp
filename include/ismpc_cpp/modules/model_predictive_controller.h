#pragma once

#include <cmath>

#include "ismpc_cpp/libraries/constraint_lib.h"
#include "ismpc_cpp/libraries/cost_lib.h"
#include "ismpc_cpp/representations/footsteps.h"
#include "ismpc_cpp/representations/frame_info.h"
#include "ismpc_cpp/representations/lip_robot.h"
#include "ismpc_cpp/tools/config/config.h"
#include "ismpc_cpp/tools/proxsuite.h"
#include "ismpc_cpp/types/math_types.h"

namespace ismpc {
/**
 * @brief Model Predictive Control class
 *
 * This class implements a Model Predictive Control (MPC) algorithm to generate
 * a control trajectory of the robot's CoM. The CoM trajectory is generated by
 * solving an optimization problem that minimizes a cost function subject to
 * constraints on the robot's dynamics and the environment.In input, the MPC
 * module needs the current state of the robot and the desired footsteps.
 */
class ModelPredictiveController {
   private:
    Matrix Xdz, Ydz, Xf, Yf;

    const FrameInfo& frame_info;
    const LipRobot& robot;
    const FootstepsPlan& footsteps;
    const CostLib& cost_lib;
    const ConstraintLib& constraint_lib;

    const int numC = Config::C;  // number of control points

    QP<Scalar> solve_qp(LipRobot& robot);

   public:
    ModelPredictiveController(const FrameInfo& frame_info, const LipRobot& robot, const FootstepsPlan& footsteps,
                              const CostLib& cost_lib, const ConstraintLib& constraint_lib);

    /**
     * @brief Update the MPC module
     * Inside this function, the MPC module solves the optimization problem,
     * generates and saves the control trajectory. The control trajectory is
     * made of the zmp velocities. Practically, this function modifies the field
     * state.desired_state of the robot.
     */
    void update(LipRobot& robot);
};

}  // namespace ismpc
