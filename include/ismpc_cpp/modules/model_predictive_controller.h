#pragma once

#include <cmath>

#include "ismpc_cpp/libraries/constraint_lib.h"
#include "ismpc_cpp/libraries/cost_lib.h"
#include "ismpc_cpp/libraries/feet_lib.h"
#include "ismpc_cpp/representations/footsteps.h"
#include "ismpc_cpp/representations/frame_info.h"
#include "ismpc_cpp/representations/state.h"
#include "ismpc_cpp/representations/walk_state.h"
#include "ismpc_cpp/tools/config/config.h"
#include "ismpc_cpp/tools/proxsuite.h"
#include "ismpc_cpp/types/math_types.h"
#include "ismpc_cpp/types/optimization.h"

namespace ismpc {
/**
 * @brief Model Predictive Control class
 *
 * This class implements a Model Predictive Control (MPC) algorithm to generate
 * a control trajectory of the robot's CoM. The CoM trajectory is generated by
 * solving an optimization problem that minimizes a cost function subject to
 * constraints on the robot's dynamics and the environment.In input, the MPC
 * module needs the current state of the robot and the desired footsteps.
 */
class ModelPredictiveController {
   private:
    Matrix Xdz, Ydz, Xf, Yf;

    const FrameInfo& frame_info;
    const State& state;
    const WalkState& walk;
    const FootstepsPlan& footsteps;
    const FeetLib& feet;
    const CostLib& cost;
    const ConstraintLib& constraint;

    // Optimization related stuff
    const int numC = Config::C;                    // number of control points
    isize n_eq = 2;                                // number of equality constraints
    isize dimz = 2 * numC;                         // number of zmp variables (xdz, ydz)
    InequalityConstraint zmp_constraint;           // zmp constraint
    InequalityConstraint zmp_velocity_constraint;  // zmp velocity constraint
    InequalityConstraint kinematic_constraint;     // kinematic constraint
    Matrix C;                                      // combined inequality constraint matrix
    VectorX l, u;                                  // combined inequality constraint bounds

    // time related stuff
    std::chrono::high_resolution_clock::time_point start, end;

   public:
    ModelPredictiveController(const FrameInfo& frame_info, const State& state, const WalkState& walk,
                              const FootstepsPlan& footsteps, const FeetLib& feet, const CostLib& cost,
                              const ConstraintLib& constraint);

    /**
     * @brief Update the MPC module
     * Inside this function, the MPC module solves the optimization problem,
     * generates and saves the control trajectory. The control trajectory is
     * made of the zmp velocities. Practically, this function modifies the field
     * state.desired_state of the robot.
     */
    void update(State& desired_state);

    Scalar total_mpc_qp_duration = 0.0;
    Scalar total_mpc_preprocessing_duration = 0.0;
    Scalar total_mpc_postprocessing_duration = 0.0;
};

}  // namespace ismpc
