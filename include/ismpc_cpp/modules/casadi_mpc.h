#pragma once

#include <casadi/casadi.hpp>
#include <cmath>

#include "ismpc_cpp/representations/footstep_plan.h"
#include "ismpc_cpp/representations/frame_info.h"
#include "ismpc_cpp/representations/state.h"
#include "ismpc_cpp/tools/config/config.h"
#include "ismpc_cpp/tools/proxsuite.h"
#include "ismpc_cpp/types/math_types.h"
#include "ismpc_cpp/types/optimization.h"

namespace ismpc {
/**
 * @brief Model Predictive Control class
 *
 * This class implements a Model Predictive Control (MPC) algorithm to generate
 * a control trajectory of the robot's CoM. The CoM trajectory is generated by
 * solving an optimization problem that minimizes a cost function subject to
 * constraints on the robot's dynamics and the environment.In input, the MPC
 * module needs the current state of the robot and the desired footsteps.
 */
class CasadiMPC {
   private:
    const FrameInfo& frame_info;
    const State& state;
    const FootstepPlan& plan;

    // Parameters
    const int numC = Config::C;  // number of control points
    const int numP = Config::P;  // number of planning points
    const Scalar delta = Config::delta;
    const Scalar eta = RobotConfig::eta;
    const Scalar dxz = RobotConfig::dxz;
    const Scalar dyz = RobotConfig::dyz;
    const Scalar zmp_vx_max = RobotConfig::zmp_vx_max;
    const Scalar zmp_vy_max = RobotConfig::zmp_vy_max;
    const TailType tail_type = Config::tail_type;

    // Lip Model
    casadi::DM A = casadi::DM({{0, 1, 0}, {eta * eta, 0, -eta* eta}, {0, 0, 0}});
    casadi::DM B = casadi::DM({0, 0, 1});

    // Optimization related stuff
    casadi::Slice all = casadi::Slice();
    casadi::Slice first_half = casadi::Slice(0, 3);
    casadi::Slice second_half = casadi::Slice(3, 6);
    casadi::Slice all_but_first = casadi::Slice(1);
    casadi::MX cost;
    casadi::DM x;
    casadi::Opti opti;
    int d;                                          // number of primal variables
    casadi::MX X, U;                                // decision variables
    casadi::MX x0_param, zmp_x_param, zmp_y_param;  // parameters

    int fs_index = 0;

    // time related stuff
    std::chrono::high_resolution_clock::time_point start, end;

    /**
     * Lip Model
     */
    casadi::MX f(const casadi::MX& x, const casadi::MX& u) const;

   public:
    CasadiMPC(const FrameInfo& frame_info, const State& state, const FootstepPlan& plan);

    /**
     * @brief Update the MPC module
     * Inside this function, the MPC module solves the optimization problem,
     * generates and saves the control trajectory. The control trajectory is
     * made of the zmp velocities. Practically, this function modifies the field
     * state.desired_state of the robot.
     */
    void update(State& state);

    Scalar total_mpc_qp_duration = 0.0;
    Scalar total_mpc_preprocessing_duration = 0.0;
    Scalar total_mpc_postprocessing_duration = 0.0;
};

}  // namespace ismpc
